---------------------------------------------------------------------------------
-- 7/17


create table t_board(
     no         number(5)       primary key         -- unique + not null
    ,title      varchar2(200)   not null            
    ,writer     varchar2(30)    not null
    ,reg_date   date            default sysdate     -- 현재시간 등록
);


select * from t_board;
-- 테이블 조회
describe t_board;
desc t_board;
-- 테이블 삭제
drop table t_board;
-- 데이터만 삭제
truncate table t_board;
-- 테이블 이름변경
rename t_board to t_board2;


alter table t_board
  add content varchar(2000);
alter table t_board
  add view_cnt char(3);
alter table t_board
  modify view_cnt number(5) default 0;
 
 
insert into t_board(no, title, writer, reg_date, content, view_cnt)
     values (1, '제목입니다', '닌자', sysdate, '내용입니다', 0);   
insert into t_board
     values (2, '제목입니다', '닌자', sysdate, '내용입니다', 0);   
insert into t_board(no, title, writer, content)
     values (4, '제목입니다', '닌자', '내용입니다');


update t_board
   set view_cnt=20, title='변경된 제목'
 where no=2;
 
 
delete t_board
 where no=3;


commit;



---------------------------------------------------------------------------------
--- 7/18


select * from employees;

select to_char(hire_date, 'yyyy') as 입사년도
  from employees;

select to_char(hire_date, 'yyyy') as 입사년도, e.*
  from employees e
 where to_char(hire_date, 'yyyy') = 2001
    or to_char(hire_date, 'yyyy') = 2002
    or to_char(hire_date, 'yyyy') = 2003;

select to_char(hire_date, 'yyyy') as 입사년도, e.*
  from employees e
 where to_char(hire_date, 'yyyy') in ('2001', '2002', '2003');

-- 커미션 (commission_pct) 이 없는 사원목록 조회
select *
  from employees
 where commission_pct is null;

-- 전체사원목록을 조회, 단 commission_pct null인 경우 0 변환
select employee_id, first_name, nvl(commission_pct, 0) as commition
  from employees;

-- 사원ID, 사원이름, manager_id 조회 / 단, manager_id가 없는경우 'manager 없음' 조회
select employee_id, first_name, nvl(to_char(manager_id), '매니저없음') as manager_id
  from employees;

-- 부서번호가 80인 사원수 조회
select count(*)
  from employees e
 where department_id = 80;

select department_id 부서명, count(*) 사원수
  from employees
 group by department_id;

select employee_id, salary
     , case when salary >= 20000 then '고액연봉자'
            when salary >= 10000 then '평균연봉자'
            else '최저연봉자'
       end as 연봉타입
  from employees;

-- from에서 rnum을 정의해줘야 where에서 이해할수있다.
select e.*
  from (select rownum as rnum, employee_id from employees) e
 where e.rnum between 5 and 10;

-- employee_id, first_name, phone_number, 지역을 id순으로 오름차순조회 / 전화번호앞자리 515서울 590대전 650광주 603부산 그외 기타
select employee_id, first_name, phone_number
     , case substr(phone_number,1,3) when '515' then '서울'
                                     when '590' then '대전'
                                     when '650' then '광주'
                                     when '603' then '부산'
                                     else '기타'
                                     end as region
  from employees
 order by 1 asc;
 
-- sequence
create sequence seq_01;
create sequence seq_02 start with 202300001;
create sequence seq_03 start with 10 increment by 10;

select seq_01.nextval from dual;
select seq_02.nextval from dual;
select seq_03.nextval from dual;



---------------------------------------------------------------------------------
-- 7/19


delete from t_board;
commit;

create sequence seq_t_board_no no cache;

select * from t_board;
desc t_board;

insert into t_board(no, title, writer, content)
     values (seq_t_board_no.nextval, '제목입니당', '홍길둔', '내용입니다');



---------------------------------------------------------------------------------
-- 7/24


create table t_member (
    id          varchar2(30) primary key
    ,password   varchar2(30) not null
    ,name       varchar2(20) not null
    ,type       char(1)      default 'U'    -- 일반유저 U / 관리자 S
);

insert into t_member
    values('admin', 'admin', '관리자', 'S');
    
insert into t_member (id, password, name)
    values('hong', 'hong1234', '홍길동');
    
commit;

select * from t_member;



---------------------------------------------------------------------------------
-- 7/25


create table t_reply(
    no          number(5)       primary key
    ,board_no   number(5)       not null
    ,content    varchar2(1000)  not null
    ,writer     varchar2(30)    not null
    ,reg_date   date            default sysdate
    ,constraint t_reply_board_no_fk foreign key(board_no)
        references t_board(no) on delete cascade
);

create sequence seq_t_reply_no;

select * from t_reply;


select no, title, writer, to_char(reg_date, 'yyyy-mm-dd') regDate
      ,(select count(*)
          from t_reply
         where board_no = b.no
        ) as replyCnt
  from t_board b
 order by no desc;